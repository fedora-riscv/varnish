diff -Nur ../varnish-6.6.2.pprep/bin/varnishd/http2/cache_http2_hpack.c ./bin/varnishd/http2/cache_http2_hpack.c
--- ../varnish-6.6.2.pprep/bin/varnishd/http2/cache_http2_hpack.c	2022-01-12 12:30:00.000000000 +0100
+++ ./bin/varnishd/http2/cache_http2_hpack.c	2022-11-14 21:37:18.595866979 +0100
@@ -96,13 +96,18 @@
 {
 	/* XXX: This might belong in cache/cache_http.c */
 	const char *b0;
+	int disallow_empty;
 	unsigned n;
+	char *p;
+	int i;
 
 	CHECK_OBJ_NOTNULL(hp, HTTP_MAGIC);
 	AN(b);
 	assert(namelen >= 2);	/* 2 chars from the ': ' that we added */
 	assert(namelen <= len);
 
+	disallow_empty = 0;
+
 	if (len > UINT_MAX) {	/* XXX: cache_param max header size */
 		VSLb(hp->vsl, SLT_BogoHeader, "Header too large: %.20s", b);
 		return (H2SE_ENHANCE_YOUR_CALM);
@@ -117,10 +122,24 @@
 			b += namelen;
 			len -= namelen;
 			n = HTTP_HDR_METHOD;
+			disallow_empty = 1;
+
+			/* First field cannot contain SP or CTL */
+			for (p = b, i = 0; i < len; p++, i++) {
+				if (vct_issp(*p) || vct_isctl(*p))
+				return (H2SE_PROTOCOL_ERROR);
+                       }
 		} else if (!strncmp(b, ":path: ", namelen)) {
 			b += namelen;
 			len -= namelen;
 			n = HTTP_HDR_URL;
+			disallow_empty = 1;
+
+			/* Second field cannot contain LWS or CTL */
+			for (p = b, i = 0; i < len; p++, i++) {
+				if (vct_islws(*p) || vct_isctl(*p))
+					return (H2SE_PROTOCOL_ERROR);
+                       }
 		} else if (!strncmp(b, ":scheme: ", namelen)) {
 			/* XXX: What to do about this one? (typically
 			   "http" or "https"). For now set it as a normal
@@ -128,6 +147,15 @@
 			b++;
 			len-=1;
 			n = hp->nhd;
+
+			for (p = b + namelen, i = 0; i < len-namelen;
+			    p++, i++) {
+				if (vct_issp(*p) || vct_isctl(*p))
+					return (H2SE_PROTOCOL_ERROR);
+                       }
+
+                       if (!i)
+				return (H2SE_PROTOCOL_ERROR);
 		} else if (!strncmp(b, ":authority: ", namelen)) {
 			b+=6;
 			len-=6;
@@ -164,6 +192,13 @@
 	hp->hd[n].b = b;
 	hp->hd[n].e = b + len;
 
+	if (disallow_empty && !Tlen(hp->hd[n])) {
+		VSLb(hp->vsl, SLT_BogoHeader,
+			"Empty pseudo-header %.*s",
+			(int)namelen, b0);
+		return (H2SE_PROTOCOL_ERROR);
+	}
+
 	return (0);
 }
 
diff -Nur ../varnish-6.6.2.pprep/bin/varnishtest/tests/t02023.vtc ./bin/varnishtest/tests/t02023.vtc
--- ../varnish-6.6.2.pprep/bin/varnishtest/tests/t02023.vtc	1970-01-01 01:00:00.000000000 +0100
+++ ./bin/varnishtest/tests/t02023.vtc	2022-11-14 21:42:38.634380069 +0100
@@ -0,0 +1,49 @@
+varnishtest "Empty pseudo-headers"
+
+server s1 {
+       rxreq
+       txresp
+} -start
+
+varnish v1 -arg "-p feature=+http2" -vcl+backend {
+} -start
+
+client c1 {
+       txreq -url ""
+       rxresp
+       expect resp.status == 400
+} -run
+
+client c1 {
+       txreq -req ""
+       rxresp
+       expect resp.status == 400
+} -run
+
+client c1 {
+       txreq -proto ""
+       rxresp
+       expect resp.status == 400
+} -run
+
+client c1 {
+       stream 1 {
+               txreq -url ""
+               rxrst
+       } -run
+} -run
+
+client c1 {
+       stream 1 {
+               txreq -scheme ""
+               rxrst
+       } -run
+} -run
+
+client c1 {
+       stream 1 {
+               txreq -req ""
+               rxrst
+       } -run
+} -run
+
diff -Nur ../varnish-6.6.2.pprep/bin/varnishtest/tests/t02024.vtc ./bin/varnishtest/tests/t02024.vtc
--- ../varnish-6.6.2.pprep/bin/varnishtest/tests/t02024.vtc	1970-01-01 01:00:00.000000000 +0100
+++ ./bin/varnishtest/tests/t02024.vtc	2022-11-14 21:43:26.592157248 +0100
@@ -0,0 +1,48 @@
+varnishtest "Garbage pseudo-headers"
+
+server s1 {
+       rxreq
+       txresp
+} -start
+
+varnish v1 -arg "-p feature=+http2" -vcl+backend {
+} -start
+
+client c1 {
+       txreq -url " "
+       rxresp
+       expect resp.status == 400
+} -run
+
+client c1 {
+       txreq -req " "
+       rxresp
+       expect resp.status == 400
+} -run
+
+client c1 {
+       txreq -proto " "
+       rxresp
+       expect resp.status == 400
+} -run
+
+client c1 {
+       stream 1 {
+               txreq -url " "
+               rxrst
+       } -run
+} -run
+
+client c1 {
+       stream 1 {
+               txreq -scheme " "
+               rxrst
+       } -run
+} -run
+
+client c1 {
+       stream 1 {
+               txreq -req " "
+               rxrst
+       } -run
+} -run
