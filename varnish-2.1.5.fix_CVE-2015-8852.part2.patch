diff -Naur ../varnish-2.1.5.orig/bin/varnishd/cache_http.c ./bin/varnishd/cache_http.c
--- ../varnish-2.1.5.orig/bin/varnishd/cache_http.c	2011-01-24 22:30:34.000000000 +0100
+++ ./bin/varnishd/cache_http.c	2016-09-08 10:35:42.414600790 +0200
@@ -432,7 +432,7 @@
 		/* Find end of next header */
 		q = r = p;
 		while (r < t.e) {
-			if (!vct_iscrlf(*r)) {
+			if (!vct_iscrlf(r)) {
 				r++;
 				continue;
 			}
@@ -533,8 +533,8 @@
 
 	/* Third field is optional and cannot contain CTL */
 	q = p;
-	if (!vct_iscrlf(*p)) {
-		for (; !vct_iscrlf(*p); p++)
+	if (!vct_iscrlf(p)) {
+		for (; !vct_iscrlf(p); p++)
 			if (!vct_issep(*p) && vct_isctl(*p))
 				return (-1);
 	}
diff -Naur ../varnish-2.1.5.orig/bin/varnishtest/tests/b00040.vtc ./bin/varnishtest/tests/b00040.vtc
--- ../varnish-2.1.5.orig/bin/varnishtest/tests/b00040.vtc	1970-01-01 01:00:00.000000000 +0100
+++ ./bin/varnishtest/tests/b00040.vtc	2016-09-08 10:40:11.725200397 +0200
@@ -0,0 +1,26 @@
+# $Id$
+
+test "Do not consider CR as a valid line separator"
+
+server s1 {
+	rxreq
+	txresp
+} -start
+
+varnish v1 -vcl+backend {
+	sub vcl_deliver {
+		if (req.http.foo) {
+			set resp.http.Foo = req.http.foo;
+		}
+		if (req.http.bar) {
+			set resp.http.Bar = req.http.bar;
+		}
+	}
+} -start
+
+client c1 {
+	send "GET / HTTP/1.1\r\nFoo: foo\rBar: bar\r\n\r\n"
+	rxresp
+	expect resp.http.foo == "foo\rBar: bar"
+	expect resp.http.bar == "<undef>"
+} -run
diff -Naur ../varnish-2.1.5.orig/bin/varnishtest/vtc_http.c ./bin/varnishtest/vtc_http.c
--- ../varnish-2.1.5.orig/bin/varnishtest/vtc_http.c	2011-01-24 22:30:34.000000000 +0100
+++ ./bin/varnishtest/vtc_http.c	2016-09-08 11:13:38.131998088 +0200
@@ -198,7 +198,7 @@
 	hdr = http_find_header(hh, hdr);
 	if (hdr != NULL)
 		return (hdr);
-	return (spec);
+	return ("<undef>");
 }
 
 static void
@@ -271,17 +271,17 @@
 	hh[n++] = p;
 	while (!vct_islws(*p))
 		p++;
-	assert(!vct_iscrlf(*p));
+	assert(!vct_iscrlf(p));
 	*p++ = '\0';
 
 	/* URL/STATUS */
 	while (vct_issp(*p))		/* XXX: H space only */
 		p++;
-	assert(!vct_iscrlf(*p));
+	assert(!vct_iscrlf(p));
 	hh[n++] = p;
 	while (!vct_islws(*p))
 		p++;
-	if (vct_iscrlf(*p)) {
+	if (vct_iscrlf(p)) {
 		hh[n++] = NULL;
 		q = p;
 		p += vct_skipcrlf(p);
@@ -292,7 +292,7 @@
 		while (vct_issp(*p))		/* XXX: H space only */
 			p++;
 		hh[n++] = p;
-		while (!vct_iscrlf(*p))
+		while (!vct_iscrlf(p))
 			p++;
 		q = p;
 		p += vct_skipcrlf(p);
@@ -302,10 +302,10 @@
 
 	while (*p != '\0') {
 		assert(n < MAX_HDR);
-		if (vct_iscrlf(*p))
+		if (vct_iscrlf(p))
 			break;
 		hh[n++] = p++;
-		while (*p != '\0' && !vct_iscrlf(*p))
+		while (*p != '\0' && !vct_iscrlf(p))
 			p++;
 		q = p;
 		p += vct_skipcrlf(p);
@@ -406,8 +406,8 @@
 			}
 			l = hp->prxbuf;
 			http_rxchar(hp, 2);
-			assert(vct_iscrlf(hp->rxbuf[l]));
-			assert(vct_iscrlf(hp->rxbuf[l + 1]));
+			assert(vct_iscrlf(&hp->rxbuf[l]));
+			assert(vct_iscrlf(&hp->rxbuf[l + 1]));
 			hp->prxbuf = l;
 			hp->rxbuf[l] = '\0';
 			if (i == 0)
diff -Naur ../varnish-2.1.5.orig/include/vct.h ./include/vct.h
--- ../varnish-2.1.5.orig/include/vct.h	2011-01-24 22:30:34.000000000 +0100
+++ ./include/vct.h	2016-09-08 10:39:29.859775375 +0200
@@ -52,7 +52,6 @@
 }
 
 #define vct_issp(x) vct_is(x, VCT_SP)
-#define vct_iscrlf(x) vct_is(x, VCT_CRLF)
 #define vct_islws(x) vct_is(x, VCT_LWS)
 #define vct_isctl(x) vct_is(x, VCT_CTL)
 #define vct_isdigit(x) vct_is(x, VCT_DIGIT)
@@ -62,5 +61,7 @@
 #define vct_isxmlnamestart(x) vct_is(x, VCT_XMLNAMESTART)
 #define vct_isxmlname(x) vct_is(x, VCT_XMLNAMESTART | VCT_XMLNAME)
 
+#define vct_iscrlf(p) (((p)[0] == '\r' && (p)[1] == '\n') || (p)[0] == '\n')
+
 /* NB: VCT always operate in ASCII, don't replace 0x0d with \r etc. */
 #define vct_skipcrlf(p) (p[0] == 0x0d && p[1] == 0x0a ? 2 : 1)
